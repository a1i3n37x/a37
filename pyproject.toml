[tool.poetry]
name = "alienrecon"
version = "0.1.0"  # You can change to "0.0.1" if you prefer for initial/pre-alpha development
description = "Alien Recon: An AI-guided CTF/Red-Team Assistant"
authors = ["a1i3n37x <your-gh-username@users.noreply.github.com>"] # Example for GitHub noreply email, or your actual email
license = "MIT"
readme = "README.md"
homepage = "https://github.com/a1i3n37x/a37"
repository = "https://github.com/a1i3n37x/a37"
keywords = ["ctf", "hacking", "security", "ai", "reconnaissance", "pentesting", "cybersecurity"]

[tool.poetry.dependencies]
python = ">=3.11"
openai = ">=1.78.1,<2.0.0"
rich = ">=10.0.0"  # <--- Make rich very flexible for now
python-dotenv = ">=1.1.0,<2.0.0"
typer = {extras = ["all"], version = "^0.9.0"} # <--- Try with caret, aiming for latest 0.9.x
httpx = "^0.27.0"
click = "<8.2.0"

[tool.poetry.group.dev.dependencies]
# Your existing dev dependencies + pytest-cov
ruff = "^0.11.9"    # From your file (ensure this is the latest or your preferred version)
mypy = "^1.15.0"    # From your file (ensure this is the latest or your preferred version)
pytest = "^8.3.5"   # From your file (ensure this is the latest or your preferred version)
pytest-cov = "^5.0.0" # For test coverage

# This section is crucial for Poetry to know how to build your project
pre-commit = "^4.2.0"
[build-system]
requires = ["poetry-core>=1.0.0"] # poetry-core is the build backend for poetry itself
build-backend = "poetry.core.masonry.api"

# --- Tool Configurations ---
# Your existing Ruff and Mypy configurations are good and remain unchanged below.

[tool.ruff]
# Set the maximum line length
line-length = 88
# Assume Python 3.11+ features (matches your python dependency)
target-version = "py311"

[tool.ruff.lint]
# Select rule codes to enable.
# E/W: pycodestyle errors/warnings
# F: Pyflakes
# I: isort (import sorting)
# UP: pyupgrade (upgrade syntax)
# Add more as needed: https://docs.astral.sh/ruff/rules/
select = ["E", "F", "W", "I", "UP"]

# You might ignore specific rules if needed, e.g. E501 (line too long)
# if you rely solely on the formatter for line length.
# ignore = ["E501"]
# Ignore specific rules
ignore = [
    "E501",  # If you want to manually handle all line lengths (but we fixed them)
             # For now, let's ONLY add UP007
    "UP007", # Do not upgrade Optional[X] to X | None
]

[tool.ruff.format]
# Optional: Configuration for the formatter, if needed beyond line-length.
# Defaults are usually good.

[tool.mypy]
# Specify the Python version you're targeting
python_version = "3.11" # Make sure this matches your project

# --- Start with reasonably strict settings ---
check_untyped_defs = true      # Checks functions without type hints
disallow_incomplete_defs = true # Checks partially annotated functions
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true         # Warns if a function returns 'Any' implicitly

# --- For dealing with libraries ---
# Set this to true if you use libraries without type stubs
# and don't want errors for them. Can be refined later.
ignore_missing_imports = true

# --- Show error codes for easier ignoring if needed ---
show_error_codes = true

[tool.poetry.scripts]
alienrecon = "alienrecon.cli:app"
